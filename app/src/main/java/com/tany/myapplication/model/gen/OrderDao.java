package com.tany.myapplication.model.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.tany.myapplication.model.entity.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OwnerId = new Property(1, Long.class, "ownerId", false, "OWNER_ID");
        public final static Property ProductId = new Property(2, int.class, "productId", false, "PRODUCT_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Count = new Property(4, int.class, "count", false, "COUNT");
        public final static Property Price = new Property(5, float.class, "price", false, "PRICE");
        public final static Property IsChecked = new Property(6, boolean.class, "isChecked", false, "IS_CHECKED");
    };

    private Query<Order> customer_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OWNER_ID\" INTEGER," + // 1: ownerId
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 2: productId
                "\"NAME\" TEXT," + // 3: name
                "\"COUNT\" INTEGER NOT NULL ," + // 4: count
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 6: isChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }
        stmt.bindLong(3, entity.getProductId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCount());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindLong(7, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }
        stmt.bindLong(3, entity.getProductId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCount());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindLong(7, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ownerId
            cursor.getInt(offset + 2), // productId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // count
            cursor.getFloat(offset + 5), // price
            cursor.getShort(offset + 6) != 0 // isChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProductId(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCount(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getFloat(offset + 5));
        entity.setIsChecked(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of Customer. */
    public List<Order> _queryCustomer_Orders(Long ownerId) {
        synchronized (this) {
            if (customer_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwnerId.eq(null));
                customer_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = customer_OrdersQuery.forCurrentThread();
        query.setParameter(0, ownerId);
        return query.list();
    }

}
